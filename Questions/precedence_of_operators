# presedence of operators - hightest to lowest:
+----------------------------------------+--------------------------------------+
| Operator                               | Description                          |
+----------------------------------------+--------------------------------------+
| ()                                     | Parentheses                          |
| **                                     | Exponentiation                       |
| -x, +x                                 | Negation and Unary Plus              |
| *, /, //                               | Multiplication, Division, Floor     |
|                                        | Division                             |
| %                                      | Modulo                               |
| +, -                                   | Addition and Subtraction             |
| <<, >>                                 | Bitwise Shift                        |
| &                                      | Bitwise AND                          |
| |                                      | Bitwise OR                           |
| ^                                      | Bitwise XOR                          |
| ==, !=, >, <, >=, <=, is, is not,      | Comparison Operators                  |
| in, not in                             |                                      |
| not                                    | Boolean NOT                          |
| and                                    | Boolean AND                          |
| or                                     | Boolean OR                           |
+----------------------------------------+--------------------------------------+



You can use bitwise operators to manipulate single bits of data. The following sample data:

    x = 15, which is 0000 1111 in binary,
    y = 16, which is 0001 0000 in binary.

will be used to illustrate the meaning of bitwise operators in Python. Examples below:

    & does a bitwise and, e.g., x & y = 0, which is 0000 0000 in binary,
    | does a bitwise or, e.g., x | y = 31, which is 0001 1111 in binary,
    ˜ does a bitwise not, e.g., ˜ x = 240*, which is 1111 0000 in binary,
    ^ does a bitwise xor, e.g., x ^ y = 31, which is 0001 1111 in binary,
    >> does a bitwise right shift, e.g., y >> 1 = 8, which is 0000 1000 in binary,
    << does a bitwise left shift, e.g., y << 3 = , which is 1000 0000 in binary,


* -16 (decimal from signed 2's complement) -- read more about the Two's complement operation.
